[
  {
    "name": "clipboard",
    "description": "Perform copy and paste operations on the system clipboard.",
    "mainProcess": true,
    "rendererProcess": true,
    "type": "Object",
    "slug": "clipboard",
    "websiteUrl": "http://electron.atom.io/docs/api/clipboard",
    "repoUrl": "https://github.com/electron/electron/blob/vundefined/docs/api/clipboard.md"
  },
  {
    "name": "crashReporter",
    "description": "Submit crash reports to a remote server.",
    "mainProcess": true,
    "rendererProcess": true,
    "type": "Object",
    "slug": "crash-reporter",
    "websiteUrl": "http://electron.atom.io/docs/api/crash-reporter",
    "repoUrl": "https://github.com/electron/electron/blob/vundefined/docs/api/crash-reporter.md"
  },
  {
    "name": "nativeImage",
    "description": "Create tray, dock, and application icons using PNG or JPG files.",
    "mainProcess": true,
    "rendererProcess": true,
    "type": "Object",
    "slug": "native-image",
    "websiteUrl": "http://electron.atom.io/docs/api/native-image",
    "repoUrl": "https://github.com/electron/electron/blob/vundefined/docs/api/native-image.md",
    "instanceMethods": [
      {
        "name": "toPNG",
        "signature": "()",
        "description": "Returns a Buffer that contains the image's PNG encoded data."
      },
      {
        "name": "toJPEG",
        "signature": "(quality)",
        "description": "Returns a Buffer that contains the image's JPEG encoded data.",
        "arguments": [
          {
            "name": "quality",
            "type": "Integer",
            "description": " (<strong>required</strong>) - Between 0 - 100."
          }
        ]
      },
      {
        "name": "toDataURL",
        "signature": "()",
        "description": "Returns the data URL of the image."
      },
      {
        "name": "getNativeHandle",
        "signature": "()",
        "platforms": [
          "macOS"
        ],
        "description": "Returns a Buffer that stores C pointer to underlying native handle of the image. On macOS, a pointer to NSImage instance would be returned. Notice that the returned pointer is a weak pointer to the underlying native image instead of a copy, so you must ensure that the associated nativeImage instance is kept around."
      },
      {
        "name": "isEmpty",
        "signature": "()",
        "description": "Returns a boolean whether the image is empty."
      },
      {
        "name": "getSize",
        "signature": "()",
        "description": "Returns the size of the image."
      },
      {
        "name": "setTemplateImage",
        "signature": "(option)",
        "description": "Marks the image as template image.",
        "arguments": [
          {
            "name": "option",
            "type": "Boolean"
          }
        ]
      },
      {
        "name": "isTemplateImage",
        "signature": "()",
        "description": "Returns a boolean whether the image is a template image."
      }
    ]
  },
  {
    "name": "shell",
    "description": "Manage files and URLs using their default applications.",
    "mainProcess": true,
    "rendererProcess": true,
    "type": "Object",
    "slug": "shell",
    "websiteUrl": "http://electron.atom.io/docs/api/shell",
    "repoUrl": "https://github.com/electron/electron/blob/vundefined/docs/api/shell.md"
  },
  {
    "name": "app",
    "description": "Control your application's event lifecycle.",
    "mainProcess": true,
    "type": "Object",
    "slug": "app",
    "websiteUrl": "http://electron.atom.io/docs/api/app",
    "repoUrl": "https://github.com/electron/electron/blob/vundefined/docs/api/app.md",
    "events": [
      {
        "name": "will-finish-launching",
        "description": "Emitted when the application has finished basic startup. On Windows and Linux, the will-finish-launching event is the same as the ready event; on macOS, this event represents the applicationWillFinishLaunching notification of NSApplication. You would usually set up listeners for the open-file and open-url events here, and start the crash reporter and auto updater. In most cases, you should just do everything in the ready event handler."
      },
      {
        "name": "ready",
        "description": "Emitted when Electron has finished initialization."
      },
      {
        "name": "window-all-closed",
        "description": "Emitted when all windows have been closed. If you do not subscribe to this event and all windows are closed, the default behavior is to quit the app; however, if you subscribe, you control whether the app quits or not. If the user pressed Cmd + Q, or the developer called app.quit(), Electron will first try to close all the windows and then emit the will-quit event, and in this case the window-all-closed event would not be emitted."
      },
      {
        "name": "before-quit",
        "description": "Emitted before the application starts closing its windows. Calling event.preventDefault() will prevent the default behaviour, which is terminating the application.",
        "returns": [
          {
            "name": "event",
            "type": "Event"
          }
        ]
      },
      {
        "name": "will-quit",
        "description": "Emitted when all windows have been closed and the application will quit. Calling event.preventDefault() will prevent the default behaviour, which is terminating the application. See the description of the window-all-closed event for the differences between the will-quit and window-all-closed events.",
        "returns": [
          {
            "name": "event",
            "type": "Event"
          }
        ]
      },
      {
        "name": "quit",
        "description": "Emitted when the application is quitting.",
        "returns": [
          {
            "name": "event",
            "type": "Event"
          },
          {
            "name": "exitCode",
            "type": "Integer"
          }
        ]
      },
      {
        "name": "open-file",
        "description": "Emitted when the user wants to open a file with the application. The open-file event is usually emitted when the application is already open and the OS wants to reuse the application to open the file. open-file is also emitted when a file is dropped onto the dock and the application is not yet running. Make sure to listen for the open-file event very early in your application startup to handle this case (even before the ready event is emitted). You should call event.preventDefault() if you want to handle this event. On Windows, you have to parse process.argv (in the main process) to get the filepath.",
        "platforms": [
          "macOS"
        ],
        "returns": [
          {
            "name": "event",
            "type": "Event"
          },
          {
            "name": "path",
            "type": "String"
          }
        ]
      },
      {
        "name": "open-url",
        "description": "Emitted when the user wants to open a URL with the application. The URL scheme must be registered to be opened by your application. You should call event.preventDefault() if you want to handle this event.",
        "platforms": [
          "macOS"
        ],
        "returns": [
          {
            "name": "event",
            "type": "Event"
          },
          {
            "name": "url",
            "type": "String"
          }
        ]
      },
      {
        "name": "activate",
        "description": "Emitted when the application is activated, which usually happens when the user clicks on the application's dock icon.",
        "platforms": [
          "macOS"
        ],
        "returns": [
          {
            "name": "event",
            "type": "Event"
          },
          {
            "name": "hasVisibleWindows",
            "type": "Boolean"
          }
        ]
      },
      {
        "name": "continue-activity",
        "description": "Emitted during Handoff when an activity from a different device wants to be resumed. You should call event.preventDefault() if you want to handle this event. A user activity can be continued only in an app that has the same developer Team ID as the activity's source app and that supports the activity's type. Supported activity types are specified in the app's Info.plist under the NSUserActivityTypes key.",
        "platforms": [
          "macOS"
        ],
        "returns": [
          {
            "name": "event",
            "type": "Event"
          },
          {
            "name": "type",
            "type": "String",
            "description": "A string identifying the activity. Maps to"
          },
          {
            "name": "userInfo",
            "type": "Object",
            "description": "Contains app-specific state stored by the activity on"
          }
        ]
      },
      {
        "name": "browser-window-blur",
        "description": "Emitted when a browserWindow gets blurred.",
        "returns": [
          {
            "name": "event",
            "type": "Event"
          },
          {
            "name": "window",
            "type": "BrowserWindow"
          }
        ]
      },
      {
        "name": "browser-window-focus",
        "description": "Emitted when a browserWindow gets focused.",
        "returns": [
          {
            "name": "event",
            "type": "Event"
          },
          {
            "name": "window",
            "type": "BrowserWindow"
          }
        ]
      },
      {
        "name": "browser-window-created",
        "description": "Emitted when a new browserWindow is created.",
        "returns": [
          {
            "name": "event",
            "type": "Event"
          },
          {
            "name": "window",
            "type": "BrowserWindow"
          }
        ]
      },
      {
        "name": "web-contents-created",
        "description": "Emitted when a new webContents is created.",
        "returns": [
          {
            "name": "event",
            "type": "Event"
          },
          {
            "name": "webContents",
            "type": "WebContents"
          }
        ]
      },
      {
        "name": "certificate-error",
        "description": "Emitted when failed to verify the certificate for url, to trust the certificate you should prevent the default behavior with event.preventDefault() and call callback(true).",
        "returns": [
          {
            "name": "event",
            "type": "Event"
          },
          {
            "name": "webContents",
            "type": "WebContents"
          },
          {
            "name": "url",
            "type": "URL"
          },
          {
            "name": "error",
            "type": "String",
            "description": "The error code"
          },
          {
            "name": "certificate",
            "type": "Object",
            "properties": [
              {
                "name": "data",
                "type": "Buffer",
                "description": "PEM encoded data"
              },
              {
                "name": "issuerName",
                "type": "String"
              }
            ]
          },
          {
            "name": "callback",
            "type": "Function"
          }
        ]
      },
      {
        "name": "select-client-certificate",
        "description": "Emitted when a client certificate is requested. The url corresponds to the navigation entry requesting the client certificate and callback needs to be called with an entry filtered from the list. Using event.preventDefault() prevents the application from using the first certificate from the store.",
        "returns": [
          {
            "name": "event",
            "type": "Event"
          },
          {
            "name": "webContents",
            "type": "WebContents"
          },
          {
            "name": "url",
            "type": "URL"
          },
          {
            "name": "callback",
            "type": "Function"
          }
        ]
      },
      {
        "name": "login",
        "description": "Emitted when webContents wants to do basic auth. The default behavior is to cancel all authentications, to override this you should prevent the default behavior with event.preventDefault() and call callback(username, password) with the credentials.",
        "returns": [
          {
            "name": "event",
            "type": "Event"
          },
          {
            "name": "webContents",
            "type": "WebContents"
          },
          {
            "name": "request",
            "type": "Object",
            "properties": [
              {
                "name": "method",
                "type": "String"
              },
              {
                "name": "url",
                "type": "URL"
              },
              {
                "name": "referrer",
                "type": "URL"
              }
            ]
          },
          {
            "name": "authInfo",
            "type": "Object",
            "properties": [
              {
                "name": "isProxy",
                "type": "Boolean"
              },
              {
                "name": "scheme",
                "type": "String"
              },
              {
                "name": "host",
                "type": "String"
              },
              {
                "name": "port",
                "type": "Integer"
              },
              {
                "name": "realm",
                "type": "String"
              }
            ]
          },
          {
            "name": "callback",
            "type": "Function"
          }
        ]
      },
      {
        "name": "gpu-process-crashed",
        "description": "Emitted when the gpu process crashes."
      }
    ]
  },
  {
    "name": "autoUpdater",
    "description": "Enable apps to automatically update themselves.",
    "mainProcess": true,
    "type": "Object",
    "slug": "auto-updater",
    "websiteUrl": "http://electron.atom.io/docs/api/auto-updater",
    "repoUrl": "https://github.com/electron/electron/blob/vundefined/docs/api/auto-updater.md",
    "events": [
      {
        "name": "error",
        "description": "Emitted when there is an error while updating.",
        "returns": [
          {
            "name": "error",
            "type": "Error"
          }
        ]
      },
      {
        "name": "checking-for-update",
        "description": "Emitted when checking if an update has started."
      },
      {
        "name": "update-available",
        "description": "Emitted when there is an available update. The update is downloaded automatically."
      },
      {
        "name": "update-not-available",
        "description": "Emitted when there is no available update."
      },
      {
        "name": "update-downloaded",
        "description": "Emitted when an update has been downloaded. On Windows only releaseName is available.",
        "returns": [
          {
            "name": "event",
            "type": "Event"
          },
          {
            "name": "releaseNotes",
            "type": "String"
          },
          {
            "name": "releaseName",
            "type": "String"
          },
          {
            "name": "releaseDate",
            "type": "Date"
          },
          {
            "name": "updateURL",
            "type": "String"
          }
        ]
      }
    ]
  },
  {
    "name": "BrowserWindow",
    "description": "Create and control browser windows.",
    "mainProcess": true,
    "type": "Class",
    "slug": "browser-window",
    "websiteUrl": "http://electron.atom.io/docs/api/browser-window",
    "repoUrl": "https://github.com/electron/electron/blob/vundefined/docs/api/browser-window.md",
    "events": [
      {
        "name": "page-title-updated",
        "description": "Emitted when the document changed its title, calling event.preventDefault() would prevent the native window's title to change.",
        "returns": [
          {
            "name": "event",
            "type": "Event"
          }
        ]
      },
      {
        "name": "close",
        "description": "Emitted when the window is going to be closed. It's emitted before the beforeunload and unload event of the DOM. Calling event.preventDefault() will cancel the close. Usually you would want to use the beforeunload handler to decide whether the window should be closed, which will also be called when the window is reloaded. In Electron, returning any value other than undefined would cancel the close. For example:",
        "returns": [
          {
            "name": "event",
            "type": "Event"
          }
        ]
      },
      {
        "name": "closed",
        "description": "Emitted when the window is closed. After you have received this event you should remove the reference to the window and avoid using it anymore."
      },
      {
        "name": "unresponsive",
        "description": "Emitted when the web page becomes unresponsive."
      },
      {
        "name": "responsive",
        "description": "Emitted when the unresponsive web page becomes responsive again."
      },
      {
        "name": "blur",
        "description": "Emitted when the window loses focus."
      },
      {
        "name": "focus",
        "description": "Emitted when the window gains focus."
      },
      {
        "name": "show",
        "description": "Emitted when the window is shown."
      },
      {
        "name": "hide",
        "description": "Emitted when the window is hidden."
      },
      {
        "name": "ready-to-show",
        "description": "Emitted when the web page has been rendered and window can be displayed without visual flash."
      },
      {
        "name": "maximize",
        "description": "Emitted when window is maximized."
      },
      {
        "name": "unmaximize",
        "description": "Emitted when the window exits from maximized state."
      },
      {
        "name": "minimize",
        "description": "Emitted when the window is minimized."
      },
      {
        "name": "restore",
        "description": "Emitted when the window is restored from minimized state."
      },
      {
        "name": "resize",
        "description": "Emitted when the window is getting resized."
      },
      {
        "name": "move",
        "description": "Emitted when the window is getting moved to a new position. Note: On macOS this event is just an alias of moved."
      },
      {
        "name": "moved",
        "description": "Emitted once when the window is moved to a new position.",
        "platforms": [
          "macOS"
        ]
      },
      {
        "name": "enter-full-screen",
        "description": "Emitted when the window enters full screen state."
      },
      {
        "name": "leave-full-screen",
        "description": "Emitted when the window leaves full screen state."
      },
      {
        "name": "enter-html-full-screen",
        "description": "Emitted when the window enters full screen state triggered by html api."
      },
      {
        "name": "leave-html-full-screen",
        "description": "Emitted when the window leaves full screen state triggered by html api."
      },
      {
        "name": "app-command",
        "description": "Emitted when an App Command is invoked. These are typically related to keyboard media keys or browser commands, as well as the \"Back\" button built into some mice on Windows. Commands are lowercased with underscores replaced with hyphens and the APPCOMMAND_ prefix stripped off. e.g. APPCOMMAND_BROWSER_BACKWARD is emitted as browser-backward.",
        "platforms": [
          "Windows"
        ],
        "returns": [
          {
            "name": "event",
            "type": "Event"
          },
          {
            "name": "command",
            "type": "String"
          }
        ]
      },
      {
        "name": "scroll-touch-begin",
        "description": "Emitted when scroll wheel event phase has begun.",
        "platforms": [
          "macOS"
        ]
      },
      {
        "name": "scroll-touch-end",
        "description": "Emitted when scroll wheel event phase has ended.",
        "platforms": [
          "macOS"
        ]
      },
      {
        "name": "swipe",
        "description": "Emitted on 3-finger swipe. Possible directions are up, right, down, left.",
        "platforms": [
          "macOS"
        ],
        "returns": [
          {
            "name": "event",
            "type": "Event"
          },
          {
            "name": "direction",
            "type": "String"
          }
        ]
      }
    ],
    "instanceMethods": [
      {
        "name": "destroy",
        "signature": "()",
        "description": "Force closing the window, the unload and beforeunload event won't be emitted for the web page, and close event will also not be emitted for this window, but it guarantees the closed event will be emitted."
      },
      {
        "name": "close",
        "signature": "()",
        "description": "Try to close the window, this has the same effect with user manually clicking the close button of the window. The web page may cancel the close though, see the close event."
      },
      {
        "name": "focus",
        "signature": "()",
        "description": "Focus on the window."
      },
      {
        "name": "blur",
        "signature": "()",
        "description": "Remove focus on the window."
      },
      {
        "name": "isFocused",
        "signature": "()",
        "description": "Returns a boolean, whether the window is focused."
      },
      {
        "name": "show",
        "signature": "()",
        "description": "Shows and gives focus to the window."
      },
      {
        "name": "showInactive",
        "signature": "()",
        "description": "Shows the window but doesn't focus on it."
      },
      {
        "name": "hide",
        "signature": "()",
        "description": "Hides the window."
      },
      {
        "name": "isVisible",
        "signature": "()",
        "description": "Returns a boolean, whether the window is visible to the user."
      },
      {
        "name": "isModal",
        "signature": "()",
        "description": "Returns whether current window is a modal window."
      },
      {
        "name": "maximize",
        "signature": "()",
        "description": "Maximizes the window."
      },
      {
        "name": "unmaximize",
        "signature": "()",
        "description": "Unmaximizes the window."
      },
      {
        "name": "isMaximized",
        "signature": "()",
        "description": "Returns a boolean, whether the window is maximized."
      },
      {
        "name": "minimize",
        "signature": "()",
        "description": "Minimizes the window. On some platforms the minimized window will be shown in the Dock."
      },
      {
        "name": "restore",
        "signature": "()",
        "description": "Restores the window from minimized state to its previous state."
      },
      {
        "name": "isMinimized",
        "signature": "()",
        "description": "Returns a boolean, whether the window is minimized."
      },
      {
        "name": "setFullScreen",
        "signature": "(flag)",
        "description": "Sets whether the window should be in fullscreen mode.",
        "arguments": [
          {
            "name": "flag",
            "type": "Boolean"
          }
        ]
      },
      {
        "name": "isFullScreen",
        "signature": "()",
        "description": "Returns a boolean, whether the window is in fullscreen mode."
      },
      {
        "name": "setAspectRatio",
        "signature": "(aspectRatio[, extraSize])",
        "platforms": [
          "macOS"
        ],
        "description": "This will have a window maintain an aspect ratio. The extra size allows a developer to have space, specified in pixels, not included within the aspect ratio calculations. This API already takes into account the difference between a window's size and its content size. Consider a normal window with an HD video player and associated controls. Perhaps there are 15 pixels of controls on the left edge, 25 pixels of controls on the right edge and 50 pixels of controls below the player. In order to maintain a 16:9 aspect ratio (standard aspect ratio for HD @1920x1080) within the player itself we would call this function with arguments of 16/9 and [ 40, 50 ]. The second argument doesn't care where the extra width and height are within the content view--only that they exist. Just sum any extra width and height areas you have within the overall content view.",
        "arguments": [
          {
            "name": "aspectRatio",
            "type": "The",
            "description": " aspect ratio we want to maintain for some portion of the"
          },
          {
            "name": "extraSize",
            "type": "Object",
            "description": " (optional) - The extra size not to be included while",
            "properties": [
              {
                "name": "width",
                "type": "Integer"
              },
              {
                "name": "height",
                "type": "Integer"
              }
            ]
          }
        ]
      },
      {
        "name": "setBounds",
        "signature": "(options[, animate])",
        "description": "Resizes and moves the window to width, height, x, y.",
        "arguments": [
          {
            "name": "options",
            "type": "Object",
            "properties": [
              {
                "name": "x",
                "type": "Integer"
              },
              {
                "name": "y",
                "type": "Integer"
              },
              {
                "name": "width",
                "type": "Integer"
              },
              {
                "name": "height",
                "type": "Integer"
              }
            ]
          },
          {
            "name": "animate",
            "type": "Boolean",
            "description": " (optional) <em>macOS</em>"
          }
        ]
      },
      {
        "name": "getBounds",
        "signature": "()",
        "description": "Returns an object that contains window's width, height, x and y values."
      },
      {
        "name": "setSize",
        "signature": "(width, height[, animate])",
        "description": "Resizes the window to width and height.",
        "arguments": [
          {
            "name": "width",
            "type": "Integer"
          },
          {
            "name": "height",
            "type": "Integer"
          },
          {
            "name": "animate",
            "type": "Boolean",
            "description": " (optional) <em>macOS</em>"
          }
        ]
      },
      {
        "name": "getSize",
        "signature": "()",
        "description": "Returns an array that contains window's width and height."
      },
      {
        "name": "setContentSize",
        "signature": "(width, height[, animate])",
        "description": "Resizes the window's client area (e.g. the web page) to width and height.",
        "arguments": [
          {
            "name": "width",
            "type": "Integer"
          },
          {
            "name": "height",
            "type": "Integer"
          },
          {
            "name": "animate",
            "type": "Boolean",
            "description": " (optional) <em>macOS</em>"
          }
        ]
      },
      {
        "name": "getContentSize",
        "signature": "()",
        "description": "Returns an array that contains window's client area's width and height."
      },
      {
        "name": "setMinimumSize",
        "signature": "(width, height)",
        "description": "Sets the minimum size of window to width and height.",
        "arguments": [
          {
            "name": "width",
            "type": "Integer"
          },
          {
            "name": "height",
            "type": "Integer"
          }
        ]
      },
      {
        "name": "getMinimumSize",
        "signature": "()",
        "description": "Returns an array that contains window's minimum width and height."
      },
      {
        "name": "setMaximumSize",
        "signature": "(width, height)",
        "description": "Sets the maximum size of window to width and height.",
        "arguments": [
          {
            "name": "width",
            "type": "Integer"
          },
          {
            "name": "height",
            "type": "Integer"
          }
        ]
      },
      {
        "name": "getMaximumSize",
        "signature": "()",
        "description": "Returns an array that contains window's maximum width and height."
      },
      {
        "name": "setResizable",
        "signature": "(resizable)",
        "description": "Sets whether the window can be manually resized by user.",
        "arguments": [
          {
            "name": "resizable",
            "type": "Boolean"
          }
        ]
      },
      {
        "name": "isResizable",
        "signature": "()",
        "description": "Returns whether the window can be manually resized by user."
      },
      {
        "name": "setMovable",
        "signature": "(movable)",
        "platforms": [
          "macOS",
          "Windows"
        ],
        "description": "Sets whether the window can be moved by user. On Linux does nothing.",
        "arguments": [
          {
            "name": "movable",
            "type": "Boolean"
          }
        ]
      },
      {
        "name": "isMovable",
        "signature": "()",
        "platforms": [
          "macOS",
          "Windows"
        ],
        "description": "Returns whether the window can be moved by user. On Linux always returns true."
      },
      {
        "name": "setMinimizable",
        "signature": "(minimizable)",
        "platforms": [
          "macOS",
          "Windows"
        ],
        "description": "Sets whether the window can be manually minimized by user. On Linux does nothing.",
        "arguments": [
          {
            "name": "minimizable",
            "type": "Boolean"
          }
        ]
      },
      {
        "name": "isMinimizable",
        "signature": "()",
        "platforms": [
          "macOS",
          "Windows"
        ],
        "description": "Returns whether the window can be manually minimized by user. On Linux always returns true."
      },
      {
        "name": "setMaximizable",
        "signature": "(maximizable)",
        "platforms": [
          "macOS",
          "Windows"
        ],
        "description": "Sets whether the window can be manually maximized by user. On Linux does nothing.",
        "arguments": [
          {
            "name": "maximizable",
            "type": "Boolean"
          }
        ]
      },
      {
        "name": "isMaximizable",
        "signature": "()",
        "platforms": [
          "macOS",
          "Windows"
        ],
        "description": "Returns whether the window can be manually maximized by user. On Linux always returns true."
      },
      {
        "name": "setFullScreenable",
        "signature": "(fullscreenable)",
        "description": "Sets whether the maximize/zoom window button toggles fullscreen mode or maximizes the window.",
        "arguments": [
          {
            "name": "fullscreenable",
            "type": "Boolean"
          }
        ]
      },
      {
        "name": "isFullScreenable",
        "signature": "()",
        "description": "Returns whether the maximize/zoom window button toggles fullscreen mode or maximizes the window."
      },
      {
        "name": "setClosable",
        "signature": "(closable)",
        "platforms": [
          "macOS",
          "Windows"
        ],
        "description": "Sets whether the window can be manually closed by user. On Linux does nothing.",
        "arguments": [
          {
            "name": "closable",
            "type": "Boolean"
          }
        ]
      },
      {
        "name": "isClosable",
        "signature": "()",
        "platforms": [
          "macOS",
          "Windows"
        ],
        "description": "Returns whether the window can be manually closed by user. On Linux always returns true."
      },
      {
        "name": "setAlwaysOnTop",
        "signature": "(flag)",
        "description": "Sets whether the window should show always on top of other windows. After setting this, the window is still a normal window, not a toolbox window which can not be focused on.",
        "arguments": [
          {
            "name": "flag",
            "type": "Boolean"
          }
        ]
      },
      {
        "name": "isAlwaysOnTop",
        "signature": "()",
        "description": "Returns whether the window is always on top of other windows."
      },
      {
        "name": "center",
        "signature": "()",
        "description": "Moves window to the center of the screen."
      },
      {
        "name": "setPosition",
        "signature": "(x, y[, animate])",
        "description": "Moves window to x and y.",
        "arguments": [
          {
            "name": "x",
            "type": "Integer"
          },
          {
            "name": "y",
            "type": "Integer"
          },
          {
            "name": "animate",
            "type": "Boolean",
            "description": " (optional) <em>macOS</em>"
          }
        ]
      },
      {
        "name": "getPosition",
        "signature": "()",
        "description": "Returns an array that contains window's current position."
      },
      {
        "name": "setTitle",
        "signature": "(title)",
        "description": "Changes the title of native window to title.",
        "arguments": [
          {
            "name": "title",
            "type": "String"
          }
        ]
      },
      {
        "name": "getTitle",
        "signature": "()",
        "description": "Returns the title of the native window. Note: The title of web page can be different from the title of the native window."
      },
      {
        "name": "setSheetOffset",
        "signature": "(offsetY[, offsetX])",
        "platforms": [
          "macOS"
        ],
        "description": "Changes the attachment point for sheets on macOS. By default, sheets are attached just below the window frame, but you may want to display them beneath a HTML-rendered toolbar. For example:"
      },
      {
        "name": "flashFrame",
        "signature": "(flag)",
        "description": "Starts or stops flashing the window to attract user's attention.",
        "arguments": [
          {
            "name": "flag",
            "type": "Boolean"
          }
        ]
      },
      {
        "name": "setSkipTaskbar",
        "signature": "(skip)",
        "description": "Makes the window not show in the taskbar.",
        "arguments": [
          {
            "name": "skip",
            "type": "Boolean"
          }
        ]
      },
      {
        "name": "setKiosk",
        "signature": "(flag)",
        "description": "Enters or leaves the kiosk mode.",
        "arguments": [
          {
            "name": "flag",
            "type": "Boolean"
          }
        ]
      },
      {
        "name": "isKiosk",
        "signature": "()",
        "description": "Returns whether the window is in kiosk mode."
      },
      {
        "name": "getNativeWindowHandle",
        "signature": "()",
        "description": "Returns the platform-specific handle of the window as Buffer. The native type of the handle is HWND on Windows, NSView* on macOS, and Window (unsigned long) on Linux."
      },
      {
        "name": "hookWindowMessage",
        "signature": "(message, callback)",
        "platforms": [
          "Windows"
        ],
        "description": "Hooks a windows message. The callback is called when the message is received in the WndProc.",
        "arguments": [
          {
            "name": "message",
            "type": "Integer"
          },
          {
            "name": "callback",
            "type": "Function"
          }
        ]
      },
      {
        "name": "isWindowMessageHooked",
        "signature": "(message)",
        "platforms": [
          "Windows"
        ],
        "description": "Returns true or false depending on whether the message is hooked.",
        "arguments": [
          {
            "name": "message",
            "type": "Integer"
          }
        ]
      },
      {
        "name": "unhookWindowMessage",
        "signature": "(message)",
        "platforms": [
          "Windows"
        ],
        "description": "Unhook the window message.",
        "arguments": [
          {
            "name": "message",
            "type": "Integer"
          }
        ]
      },
      {
        "name": "unhookAllWindowMessages",
        "signature": "()",
        "platforms": [
          "Windows"
        ],
        "description": "Unhooks all of the window messages."
      },
      {
        "name": "setRepresentedFilename",
        "signature": "(filename)",
        "platforms": [
          "macOS"
        ],
        "description": "Sets the pathname of the file the window represents, and the icon of the file will show in window's title bar.",
        "arguments": [
          {
            "name": "filename",
            "type": "String"
          }
        ]
      },
      {
        "name": "getRepresentedFilename",
        "signature": "()",
        "platforms": [
          "macOS"
        ],
        "description": "Returns the pathname of the file the window represents."
      },
      {
        "name": "setDocumentEdited",
        "signature": "(edited)",
        "platforms": [
          "macOS"
        ],
        "description": "Specifies whether the window’s document has been edited, and the icon in title bar will become gray when set to true.",
        "arguments": [
          {
            "name": "edited",
            "type": "Boolean"
          }
        ]
      },
      {
        "name": "isDocumentEdited",
        "signature": "()",
        "platforms": [
          "macOS"
        ],
        "description": "Whether the window's document has been edited."
      },
      {
        "name": "focusOnWebView",
        "signature": "()"
      },
      {
        "name": "blurWebView",
        "signature": "()"
      },
      {
        "name": "capturePage",
        "signature": "([rect, ]callback)",
        "description": "Captures a snapshot of the page within rect. Upon completion callback will be called with callback(image). The image is an instance of NativeImage that stores data of the snapshot. Omitting rect will capture the whole visible page.",
        "arguments": [
          {
            "name": "rect",
            "type": "Object",
            "description": " (optional) - The area of page to be captured",
            "properties": [
              {
                "name": "x",
                "type": "Integer"
              },
              {
                "name": "y",
                "type": "Integer"
              },
              {
                "name": "width",
                "type": "Integer"
              },
              {
                "name": "height",
                "type": "Integer"
              }
            ]
          },
          {
            "name": "callback",
            "type": "Function"
          }
        ]
      },
      {
        "name": "loadURL",
        "signature": "(url[, options])",
        "description": "Same as webContents.loadURL(url[, options])."
      },
      {
        "name": "reload",
        "signature": "()",
        "description": "Same as webContents.reload."
      },
      {
        "name": "setMenu",
        "signature": "(menu)",
        "platforms": [
          "Linux",
          "Windows"
        ],
        "description": "Sets the menu as the window's menu bar, setting it to null will remove the menu bar.",
        "arguments": [
          {
            "name": "menu",
            "type": "Menu"
          }
        ]
      },
      {
        "name": "setProgressBar",
        "signature": "(progress)",
        "description": "Sets progress value in progress bar. Valid range is [0, 1.0]. Remove progress bar when progress < 0; Change to indeterminate mode when progress > 1. On Linux platform, only supports Unity desktop environment, you need to specify the *.desktop file name to desktopName field in package.json. By default, it will assume app.getName().desktop.",
        "arguments": [
          {
            "name": "progress",
            "type": "Double"
          }
        ]
      },
      {
        "name": "setOverlayIcon",
        "signature": "(overlay, description)",
        "platforms": [
          "Windows 7+"
        ],
        "description": "Sets a 16 x 16 pixel overlay onto the current taskbar icon, usually used to convey some sort of application status or to passively notify the user.",
        "arguments": [
          {
            "name": "overlay",
            "type": "NativeImage",
            "description": "the icon to display on the bottom"
          },
          {
            "name": "description",
            "type": "String",
            "description": "a description that will be provided to Accessibility"
          }
        ]
      },
      {
        "name": "setHasShadow",
        "signature": "(hasShadow)",
        "platforms": [
          "macOS"
        ],
        "description": "Sets whether the window should have a shadow. On Windows and Linux does nothing."
      },
      {
        "name": "hasShadow",
        "signature": "()",
        "platforms": [
          "macOS"
        ],
        "description": "Returns whether the window has a shadow. On Windows and Linux always returns true."
      },
      {
        "name": "setThumbarButtons",
        "signature": "(buttons)",
        "platforms": [
          "Windows 7+"
        ],
        "description": "Add a thumbnail toolbar with a specified set of buttons to the thumbnail image of a window in a taskbar button layout. Returns a Boolean object indicates whether the thumbnail has been added successfully. The number of buttons in thumbnail toolbar should be no greater than 7 due to the limited room. Once you setup the thumbnail toolbar, the toolbar cannot be removed due to the platform's limitation. But you can call the API with an empty array to clean the buttons. The buttons is an array of Button objects: The flags is an array that can include following Strings:",
        "arguments": [
          {
            "name": "buttons",
            "type": "Array"
          },
          {
            "name": "Button",
            "type": "Object",
            "properties": [
              {
                "name": "click",
                "type": "Function"
              },
              {
                "name": "tooltip",
                "type": "String",
                "description": " (optional) - The text of the button&apos;s tooltip."
              }
            ]
          }
        ]
      },
      {
        "name": "showDefinitionForSelection",
        "signature": "()",
        "platforms": [
          "macOS"
        ],
        "description": "Same as webContents.showDefinitionForSelection()."
      },
      {
        "name": "setIcon",
        "signature": "(icon)",
        "platforms": [
          "Windows",
          "Linux"
        ],
        "description": "Changes window icon.",
        "arguments": [
          {
            "name": "icon",
            "type": "NativeImage"
          }
        ]
      },
      {
        "name": "setAutoHideMenuBar",
        "signature": "(hide)",
        "description": "Sets whether the window menu bar should hide itself automatically. Once set the menu bar will only show when users press the single Alt key. If the menu bar is already visible, calling setAutoHideMenuBar(true) won't hide it immediately.",
        "arguments": [
          {
            "name": "hide",
            "type": "Boolean"
          }
        ]
      },
      {
        "name": "isMenuBarAutoHide",
        "signature": "()",
        "description": "Returns whether menu bar automatically hides itself."
      },
      {
        "name": "setMenuBarVisibility",
        "signature": "(visible)",
        "description": "Sets whether the menu bar should be visible. If the menu bar is auto-hide, users can still bring up the menu bar by pressing the single Alt key.",
        "arguments": [
          {
            "name": "visible",
            "type": "Boolean"
          }
        ]
      },
      {
        "name": "isMenuBarVisible",
        "signature": "()",
        "description": "Returns whether the menu bar is visible."
      },
      {
        "name": "setVisibleOnAllWorkspaces",
        "signature": "(visible)",
        "description": "Sets whether the window should be visible on all workspaces. Note: This API does nothing on Windows.",
        "arguments": [
          {
            "name": "visible",
            "type": "Boolean"
          }
        ]
      },
      {
        "name": "isVisibleOnAllWorkspaces",
        "signature": "()",
        "description": "Returns whether the window is visible on all workspaces. Note: This API always returns false on Windows."
      },
      {
        "name": "setIgnoreMouseEvents",
        "signature": "(ignore)",
        "description": "Makes the window ignore all mouse events. All mouse events happened in this window will be passed to the window below this window, but if this window has focus, it will still receive keyboard events.",
        "arguments": [
          {
            "name": "ignore",
            "type": "Boolean"
          }
        ]
      },
      {
        "name": "setContentProtection",
        "signature": "(enable)",
        "platforms": [
          "macOS",
          "Windows"
        ],
        "description": "Prevents the window contents from being captured by other apps. On macOS it sets the NSWindow's sharingType to NSWindowSharingNone. On Windows it calls SetWindowDisplayAffinity with WDA_MONITOR."
      },
      {
        "name": "setFocusable",
        "signature": "(focusable)",
        "platforms": [
          "Windows"
        ],
        "description": "Changes whether the window can be focused.",
        "arguments": [
          {
            "name": "focusable",
            "type": "Boolean"
          }
        ]
      },
      {
        "name": "setParentWindow",
        "signature": "(parent)",
        "platforms": [
          "Linux",
          "macOS"
        ],
        "description": "Sets parent as current window's parent window, passing null will turn current window into a top-level window.",
        "arguments": [
          {
            "name": "parent",
            "type": "BrowserWindow"
          }
        ]
      },
      {
        "name": "getParentWindow",
        "signature": "()",
        "description": "Returns the parent window."
      },
      {
        "name": "getChildWindows",
        "signature": "()",
        "description": "Returns all child windows."
      }
    ]
  },
  {
    "name": "contentTracing",
    "description": "Collect tracing data from Chromium's content module for finding performance\nbottlenecks and slow operations.",
    "mainProcess": true,
    "type": "Object",
    "slug": "content-tracing",
    "websiteUrl": "http://electron.atom.io/docs/api/content-tracing",
    "repoUrl": "https://github.com/electron/electron/blob/vundefined/docs/api/content-tracing.md"
  },
  {
    "name": "dialog",
    "description": "Display native system dialogs for opening and saving files, alerting, etc.",
    "mainProcess": true,
    "type": "Object",
    "slug": "dialog",
    "websiteUrl": "http://electron.atom.io/docs/api/dialog",
    "repoUrl": "https://github.com/electron/electron/blob/vundefined/docs/api/dialog.md"
  },
  {
    "name": "ipcMain",
    "description": "Communicate asynchronously from the main process to renderer processes.",
    "mainProcess": true,
    "type": "Object",
    "slug": "ipc-main",
    "websiteUrl": "http://electron.atom.io/docs/api/ipc-main",
    "repoUrl": "https://github.com/electron/electron/blob/vundefined/docs/api/ipc-main.md"
  },
  {
    "name": "globalShortcut",
    "description": "Detect keyboard events when the application does not have keyboard focus.",
    "mainProcess": true,
    "type": "Object",
    "slug": "global-shortcut",
    "websiteUrl": "http://electron.atom.io/docs/api/global-shortcut",
    "repoUrl": "https://github.com/electron/electron/blob/vundefined/docs/api/global-shortcut.md"
  },
  {
    "name": "Menu",
    "description": "Create native application menus and context menus.",
    "mainProcess": true,
    "type": "Class",
    "slug": "menu",
    "websiteUrl": "http://electron.atom.io/docs/api/menu",
    "repoUrl": "https://github.com/electron/electron/blob/vundefined/docs/api/menu.md",
    "instanceMethods": [
      {
        "name": "popup",
        "signature": "([browserWindow, x, y, positioningItem])",
        "description": "Pops up this menu as a context menu in the browserWindow. You can optionally provide a x, y coordinate to place the menu at, otherwise it will be placed at the current mouse cursor position.",
        "arguments": [
          {
            "name": "browserWindow",
            "type": "BrowserWindow",
            "description": " (optional) - Default is <code>null</code>."
          },
          {
            "name": "x",
            "type": "Number",
            "description": " (optional) - Default is -1."
          },
          {
            "name": "y",
            "type": "Number",
            "description": " (<strong>required</strong> if <code>x</code> is used) - Default is -1."
          },
          {
            "name": "positioningItem",
            "type": "Number",
            "description": " (optional) <em>macOS</em> - The index of the menu item to"
          }
        ]
      },
      {
        "name": "append",
        "signature": "(menuItem)",
        "description": "Appends the menuItem to the menu.",
        "arguments": [
          {
            "name": "menuItem",
            "type": "MenuItem"
          }
        ]
      },
      {
        "name": "insert",
        "signature": "(pos, menuItem)",
        "description": "Inserts the menuItem to the pos position of the menu.",
        "arguments": [
          {
            "name": "pos",
            "type": "Integer"
          },
          {
            "name": "menuItem",
            "type": "MenuItem"
          }
        ]
      }
    ]
  },
  {
    "name": "MenuItem",
    "description": "Add items to native application menus and context menus.",
    "mainProcess": true,
    "type": "Class",
    "slug": "menu-item",
    "websiteUrl": "http://electron.atom.io/docs/api/menu-item",
    "repoUrl": "https://github.com/electron/electron/blob/vundefined/docs/api/menu-item.md"
  },
  {
    "name": "powerMonitor",
    "description": "Monitor power state changes.",
    "mainProcess": true,
    "type": "Object",
    "slug": "power-monitor",
    "websiteUrl": "http://electron.atom.io/docs/api/power-monitor",
    "repoUrl": "https://github.com/electron/electron/blob/vundefined/docs/api/power-monitor.md",
    "events": [
      {
        "name": "suspend",
        "description": "Emitted when the system is suspending."
      },
      {
        "name": "resume",
        "description": "Emitted when system is resuming."
      },
      {
        "name": "on-ac",
        "description": "Emitted when the system changes to AC power.",
        "platforms": [
          "Windows"
        ]
      },
      {
        "name": "on-battery",
        "description": "Emitted when system changes to battery power.",
        "platforms": [
          "Windows"
        ]
      }
    ]
  },
  {
    "name": "powerSaveBlocker",
    "description": "Block the system from entering low-power (sleep) mode.",
    "mainProcess": true,
    "type": "Object",
    "slug": "power-save-blocker",
    "websiteUrl": "http://electron.atom.io/docs/api/power-save-blocker",
    "repoUrl": "https://github.com/electron/electron/blob/vundefined/docs/api/power-save-blocker.md"
  },
  {
    "name": "protocol",
    "description": "Register a custom protocol and intercept existing protocol requests.",
    "mainProcess": true,
    "type": "Object",
    "slug": "protocol",
    "websiteUrl": "http://electron.atom.io/docs/api/protocol",
    "repoUrl": "https://github.com/electron/electron/blob/vundefined/docs/api/protocol.md"
  },
  {
    "name": "screen",
    "description": "Retrieve information about screen size, displays, cursor position, etc.",
    "mainProcess": true,
    "rendererProcess": true,
    "type": "Object",
    "slug": "screen",
    "websiteUrl": "http://electron.atom.io/docs/api/screen",
    "repoUrl": "https://github.com/electron/electron/blob/vundefined/docs/api/screen.md",
    "events": [
      {
        "name": "display-added",
        "description": "Emitted when newDisplay has been added.",
        "returns": [
          {
            "name": "event",
            "type": "Event"
          },
          {
            "name": "newDisplay",
            "type": "Object"
          }
        ]
      },
      {
        "name": "display-removed",
        "description": "Emitted when oldDisplay has been removed.",
        "returns": [
          {
            "name": "event",
            "type": "Event"
          },
          {
            "name": "oldDisplay",
            "type": "Object"
          }
        ]
      },
      {
        "name": "display-metrics-changed",
        "description": "Emitted when one or more metrics change in a display. The changedMetrics is an array of strings that describe the changes. Possible changes are bounds, workArea, scaleFactor and rotation.",
        "returns": [
          {
            "name": "event",
            "type": "Event"
          },
          {
            "name": "display",
            "type": "Object"
          },
          {
            "name": "changedMetrics",
            "type": "Array"
          }
        ]
      }
    ]
  },
  {
    "name": "session",
    "description": "Manage browser sessions, cookies, cache, proxy settings, etc.",
    "mainProcess": true,
    "type": "Object",
    "slug": "session",
    "websiteUrl": "http://electron.atom.io/docs/api/session",
    "repoUrl": "https://github.com/electron/electron/blob/vundefined/docs/api/session.md"
  },
  {
    "name": "systemPreferences",
    "description": "Get system preferences.",
    "mainProcess": true,
    "type": "Object",
    "slug": "system-preferences",
    "websiteUrl": "http://electron.atom.io/docs/api/system-preferences",
    "repoUrl": "https://github.com/electron/electron/blob/vundefined/docs/api/system-preferences.md"
  },
  {
    "name": "Tray",
    "description": "Add icons and context menus to the system's notification area.",
    "mainProcess": true,
    "type": "Class",
    "slug": "tray",
    "websiteUrl": "http://electron.atom.io/docs/api/tray",
    "repoUrl": "https://github.com/electron/electron/blob/vundefined/docs/api/tray.md"
  },
  {
    "name": "webContents",
    "description": "Render and control web pages.",
    "mainProcess": true,
    "type": "Object",
    "slug": "web-contents",
    "websiteUrl": "http://electron.atom.io/docs/api/web-contents",
    "repoUrl": "https://github.com/electron/electron/blob/vundefined/docs/api/web-contents.md",
    "events": [
      {
        "name": "did-finish-load",
        "description": "Emitted when the navigation is done, i.e. the spinner of the tab has stopped spinning, and the onload event was dispatched."
      },
      {
        "name": "did-fail-load",
        "description": "This event is like did-finish-load but emitted when the load failed or was cancelled, e.g. window.stop() is invoked. The full list of error codes and their meaning is available here. Note that redirect responses will emit errorCode -3; you may want to ignore that error explicitly.",
        "returns": [
          {
            "name": "event",
            "type": "Event"
          },
          {
            "name": "errorCode",
            "type": "Integer"
          },
          {
            "name": "errorDescription",
            "type": "String"
          },
          {
            "name": "validatedURL",
            "type": "String"
          },
          {
            "name": "isMainFrame",
            "type": "Boolean"
          }
        ]
      },
      {
        "name": "did-frame-finish-load",
        "description": "Emitted when a frame has done navigation.",
        "returns": [
          {
            "name": "event",
            "type": "Event"
          },
          {
            "name": "isMainFrame",
            "type": "Boolean"
          }
        ]
      },
      {
        "name": "did-start-loading",
        "description": "Corresponds to the points in time when the spinner of the tab started spinning."
      },
      {
        "name": "did-stop-loading",
        "description": "Corresponds to the points in time when the spinner of the tab stopped spinning."
      },
      {
        "name": "did-get-response-details",
        "description": "Emitted when details regarding a requested resource are available. status indicates the socket connection to download the resource.",
        "returns": [
          {
            "name": "event",
            "type": "Event"
          },
          {
            "name": "status",
            "type": "Boolean"
          },
          {
            "name": "newURL",
            "type": "String"
          },
          {
            "name": "originalURL",
            "type": "String"
          },
          {
            "name": "httpResponseCode",
            "type": "Integer"
          },
          {
            "name": "requestMethod",
            "type": "String"
          },
          {
            "name": "referrer",
            "type": "String"
          },
          {
            "name": "headers",
            "type": "Object"
          },
          {
            "name": "resourceType",
            "type": "String"
          }
        ]
      },
      {
        "name": "did-get-redirect-request",
        "description": "Emitted when a redirect is received while requesting a resource.",
        "returns": [
          {
            "name": "event",
            "type": "Event"
          },
          {
            "name": "oldURL",
            "type": "String"
          },
          {
            "name": "newURL",
            "type": "String"
          },
          {
            "name": "isMainFrame",
            "type": "Boolean"
          },
          {
            "name": "httpResponseCode",
            "type": "Integer"
          },
          {
            "name": "requestMethod",
            "type": "String"
          },
          {
            "name": "referrer",
            "type": "String"
          },
          {
            "name": "headers",
            "type": "Object"
          }
        ]
      },
      {
        "name": "dom-ready",
        "description": "Emitted when the document in the given frame is loaded.",
        "returns": [
          {
            "name": "event",
            "type": "Event"
          }
        ]
      },
      {
        "name": "page-favicon-updated",
        "description": "Emitted when page receives favicon urls.",
        "returns": [
          {
            "name": "event",
            "type": "Event"
          },
          {
            "name": "favicons",
            "type": "Array",
            "description": "Array of URLs"
          }
        ]
      },
      {
        "name": "new-window",
        "description": "Emitted when the page requests to open a new window for a url. It could be requested by window.open or an external link like <a target='_blank'>. By default a new BrowserWindow will be created for the url. Calling event.preventDefault() will prevent creating new windows.",
        "returns": [
          {
            "name": "event",
            "type": "Event"
          },
          {
            "name": "url",
            "type": "String"
          },
          {
            "name": "frameName",
            "type": "String"
          },
          {
            "name": "disposition",
            "type": "String",
            "description": "Can be <code>default</code>, <code>foreground-tab</code>, <code>background-tab</code>,"
          },
          {
            "name": "options",
            "type": "Object",
            "description": "The options which will be used for creating the new"
          }
        ]
      },
      {
        "name": "will-navigate",
        "description": "Emitted when a user or the page wants to start navigation. It can happen when the window.location object is changed or a user clicks a link in the page. This event will not emit when the navigation is started programmatically with APIs like webContents.loadURL and webContents.back. It is also not emitted for in-page navigations, such as clicking anchor links or updating the window.location.hash. Use did-navigate-in-page event for this purpose. Calling event.preventDefault() will prevent the navigation.",
        "returns": [
          {
            "name": "event",
            "type": "Event"
          },
          {
            "name": "url",
            "type": "String"
          }
        ]
      },
      {
        "name": "did-navigate",
        "description": "Emitted when a navigation is done. This event is not emitted for in-page navigations, such as clicking anchor links or updating the window.location.hash. Use did-navigate-in-page event for this purpose.",
        "returns": [
          {
            "name": "event",
            "type": "Event"
          },
          {
            "name": "url",
            "type": "String"
          }
        ]
      },
      {
        "name": "did-navigate-in-page",
        "description": "Emitted when an in-page navigation happened. When in-page navigation happens, the page URL changes but does not cause navigation outside of the page. Examples of this occurring are when anchor links are clicked or when the DOM hashchange event is triggered.",
        "returns": [
          {
            "name": "event",
            "type": "Event"
          },
          {
            "name": "url",
            "type": "String"
          }
        ]
      },
      {
        "name": "crashed",
        "description": "Emitted when the renderer process has crashed."
      },
      {
        "name": "plugin-crashed",
        "description": "Emitted when a plugin process has crashed.",
        "returns": [
          {
            "name": "event",
            "type": "Event"
          },
          {
            "name": "name",
            "type": "String"
          },
          {
            "name": "version",
            "type": "String"
          }
        ]
      },
      {
        "name": "destroyed",
        "description": "Emitted when webContents is destroyed."
      },
      {
        "name": "devtools-opened",
        "description": "Emitted when DevTools is opened."
      },
      {
        "name": "devtools-closed",
        "description": "Emitted when DevTools is closed."
      },
      {
        "name": "devtools-focused",
        "description": "Emitted when DevTools is focused / opened."
      },
      {
        "name": "certificate-error",
        "description": "Emitted when failed to verify the certificate for url. The usage is the same with the certificate-error event of app.",
        "returns": [
          {
            "name": "event",
            "type": "Event"
          },
          {
            "name": "url",
            "type": "URL"
          },
          {
            "name": "error",
            "type": "String",
            "description": "The error code"
          },
          {
            "name": "certificate",
            "type": "Object",
            "properties": [
              {
                "name": "data",
                "type": "Buffer",
                "description": "PEM encoded data"
              },
              {
                "name": "issuerName",
                "type": "String"
              }
            ]
          },
          {
            "name": "callback",
            "type": "Function"
          }
        ]
      },
      {
        "name": "select-client-certificate",
        "description": "Emitted when a client certificate is requested. The usage is the same with the select-client-certificate event of app.",
        "returns": [
          {
            "name": "event",
            "type": "Event"
          },
          {
            "name": "url",
            "type": "URL"
          },
          {
            "name": "callback",
            "type": "Function"
          }
        ]
      },
      {
        "name": "login",
        "description": "Emitted when webContents wants to do basic auth. The usage is the same with the login event of app.",
        "returns": [
          {
            "name": "event",
            "type": "Event"
          },
          {
            "name": "request",
            "type": "Object",
            "properties": [
              {
                "name": "method",
                "type": "String"
              },
              {
                "name": "url",
                "type": "URL"
              },
              {
                "name": "referrer",
                "type": "URL"
              }
            ]
          },
          {
            "name": "authInfo",
            "type": "Object",
            "properties": [
              {
                "name": "isProxy",
                "type": "Boolean"
              },
              {
                "name": "scheme",
                "type": "String"
              },
              {
                "name": "host",
                "type": "String"
              },
              {
                "name": "port",
                "type": "Integer"
              },
              {
                "name": "realm",
                "type": "String"
              }
            ]
          },
          {
            "name": "callback",
            "type": "Function"
          }
        ]
      },
      {
        "name": "found-in-page",
        "description": "Emitted when a result is available for webContents.findInPage request.",
        "returns": [
          {
            "name": "event",
            "type": "Event"
          },
          {
            "name": "result",
            "type": "Object",
            "properties": [
              {
                "name": "requestId",
                "type": "Integer"
              },
              {
                "name": "finalUpdate",
                "type": "Boolean",
                "description": "Indicates if more responses are to follow."
              },
              {
                "name": "activeMatchOrdinal",
                "type": "Integer",
                "description": " (optional) - Position of the active match."
              },
              {
                "name": "matches",
                "type": "Integer",
                "description": " (optional) - Number of Matches."
              },
              {
                "name": "selectionArea",
                "type": "Object",
                "description": " (optional) - Coordinates of first match region."
              }
            ]
          }
        ]
      },
      {
        "name": "media-started-playing",
        "description": "Emitted when media starts playing."
      },
      {
        "name": "media-paused",
        "description": "Emitted when media is paused or done playing."
      },
      {
        "name": "did-change-theme-color",
        "description": "Emitted when a page's theme color changes. This is usually due to encountering a meta tag:"
      },
      {
        "name": "update-target-url",
        "description": "Emitted when mouse moves over a link or the keyboard moves the focus to a link.",
        "returns": [
          {
            "name": "event",
            "type": "Event"
          },
          {
            "name": "url",
            "type": "String"
          }
        ]
      },
      {
        "name": "cursor-changed",
        "description": "Emitted when the cursor's type changes. The type parameter can be default, crosshair, pointer, text, wait, help, e-resize, n-resize, ne-resize, nw-resize, s-resize, se-resize, sw-resize, w-resize, ns-resize, ew-resize, nesw-resize, nwse-resize, col-resize, row-resize, m-panning, e-panning, n-panning, ne-panning, nw-panning, s-panning, se-panning, sw-panning, w-panning, move, vertical-text, cell, context-menu, alias, progress, nodrop, copy, none, not-allowed, zoom-in, zoom-out, grab, grabbing, custom. If the type parameter is custom, the image parameter will hold the custom cursor image in a NativeImage, and the scale will hold scaling information for the image.",
        "returns": [
          {
            "name": "event",
            "type": "Event"
          },
          {
            "name": "type",
            "type": "String"
          },
          {
            "name": "image",
            "type": "NativeImage",
            "description": " (optional)"
          },
          {
            "name": "scale",
            "type": "Float",
            "description": " (optional)"
          }
        ]
      },
      {
        "name": "context-menu",
        "description": "The mediaFlags is an object with the following properties: The editFlags is an object with the following properties: Emitted when there is a new context menu that needs to be handled.",
        "returns": [
          {
            "name": "event",
            "type": "Event"
          },
          {
            "name": "params",
            "type": "Object",
            "properties": [
              {
                "name": "x",
                "type": "Integer",
                "description": "x coordinate"
              },
              {
                "name": "y",
                "type": "Integer",
                "description": "y coordinate"
              },
              {
                "name": "file",
                "type": "or",
                "description": " <code>plugin</code>."
              },
              {
                "name": "isEditable",
                "type": "Boolean",
                "description": "Wether the context is editable."
              },
              {
                "name": "misspelledWord",
                "type": "String",
                "description": "The misspelled word under the cursor, if any."
              }
            ]
          },
          {
            "name": "inError",
            "type": "Boolean",
            "description": "Wether the media element has crashed."
          },
          {
            "name": "isPaused",
            "type": "Boolean",
            "description": "Wether the media element is paused."
          },
          {
            "name": "isMuted",
            "type": "Boolean",
            "description": "Wether the media element is muted."
          },
          {
            "name": "hasAudio",
            "type": "Boolean",
            "description": "Wether the media element has audio."
          },
          {
            "name": "isLooping",
            "type": "Boolean",
            "description": "Wether the media element is looping."
          },
          {
            "name": "isControlsVisible",
            "type": "Boolean",
            "description": "Wether the media element&apos;s controls are"
          },
          {
            "name": "canToggleControls",
            "type": "Boolean",
            "description": "Wether the media element&apos;s controls are"
          },
          {
            "name": "canRotate",
            "type": "Boolean",
            "description": "Wether the media element can be rotated."
          },
          {
            "name": "canUndo",
            "type": "Boolean",
            "description": "Wether the renderer believes it can undo."
          },
          {
            "name": "canRedo",
            "type": "Boolean",
            "description": "Wether the renderer believes it can redo."
          },
          {
            "name": "canCut",
            "type": "Boolean",
            "description": "Wether the renderer believes it can cut."
          },
          {
            "name": "canCopy",
            "type": "Boolean",
            "description": "Wether the renderer believes it can copy"
          },
          {
            "name": "canPaste",
            "type": "Boolean",
            "description": "Wether the renderer believes it can paste."
          },
          {
            "name": "canDelete",
            "type": "Boolean",
            "description": "Wether the renderer believes it can delete."
          },
          {
            "name": "canSelectAll",
            "type": "Boolean",
            "description": "Wether the renderer believes it can select all."
          }
        ]
      },
      {
        "name": "select-bluetooth-device",
        "description": "Emitted when bluetooth device needs to be selected on call to navigator.bluetooth.requestDevice. To use navigator.bluetooth api webBluetooth should be enabled.  If event.preventDefault is not called, first available device will be selected. callback should be called with deviceId to be selected, passing empty string to callback will cancel the request.",
        "returns": [
          {
            "name": "event",
            "type": "Event"
          },
          {
            "name": "callback",
            "type": "Function",
            "properties": [
              {
                "name": "deviceId",
                "type": "String"
              }
            ]
          }
        ]
      }
    ],
    "instanceMethods": [
      {
        "name": "loadURL",
        "signature": "(url[, options])",
        "description": "Loads the url in the window, the url must contain the protocol prefix, e.g. the http:// or file://. If the load should bypass http cache then use the pragma header to achieve it.",
        "arguments": [
          {
            "name": "url",
            "type": "URL"
          },
          {
            "name": "options",
            "type": "Object",
            "description": " (optional)",
            "properties": [
              {
                "name": "httpReferrer",
                "type": "String",
                "description": "A HTTP Referrer url."
              },
              {
                "name": "userAgent",
                "type": "String",
                "description": "A user agent originating the request."
              },
              {
                "name": "extraHeaders",
                "type": "String",
                "description": "Extra headers separated by &quot;\\n&quot;"
              }
            ]
          }
        ]
      },
      {
        "name": "downloadURL",
        "signature": "(url)",
        "description": "Initiates a download of the resource at url without navigating. The will-download event of session will be triggered.",
        "arguments": [
          {
            "name": "url",
            "type": "URL"
          }
        ]
      },
      {
        "name": "getURL",
        "signature": "()",
        "description": "Returns URL of the current web page."
      },
      {
        "name": "getTitle",
        "signature": "()",
        "description": "Returns the title of the current web page."
      },
      {
        "name": "isLoading",
        "signature": "()",
        "description": "Returns whether web page is still loading resources."
      },
      {
        "name": "isLoadingMainFrame",
        "signature": "()",
        "description": "Returns whether the main frame (and not just iframes or frames within it) is still loading."
      },
      {
        "name": "isWaitingForResponse",
        "signature": "()",
        "description": "Returns whether the web page is waiting for a first-response from the main resource of the page."
      },
      {
        "name": "stop",
        "signature": "()",
        "description": "Stops any pending navigation."
      },
      {
        "name": "reload",
        "signature": "()",
        "description": "Reloads the current web page."
      },
      {
        "name": "reloadIgnoringCache",
        "signature": "()",
        "description": "Reloads current page and ignores cache."
      },
      {
        "name": "canGoBack",
        "signature": "()",
        "description": "Returns whether the browser can go back to previous web page."
      },
      {
        "name": "canGoForward",
        "signature": "()",
        "description": "Returns whether the browser can go forward to next web page."
      },
      {
        "name": "canGoToOffset",
        "signature": "(offset)",
        "description": "Returns whether the web page can go to offset.",
        "arguments": [
          {
            "name": "offset",
            "type": "Integer"
          }
        ]
      },
      {
        "name": "clearHistory",
        "signature": "()",
        "description": "Clears the navigation history."
      },
      {
        "name": "goBack",
        "signature": "()",
        "description": "Makes the browser go back a web page."
      },
      {
        "name": "goForward",
        "signature": "()",
        "description": "Makes the browser go forward a web page."
      },
      {
        "name": "goToIndex",
        "signature": "(index)",
        "description": "Navigates browser to the specified absolute web page index.",
        "arguments": [
          {
            "name": "index",
            "type": "Integer"
          }
        ]
      },
      {
        "name": "goToOffset",
        "signature": "(offset)",
        "description": "Navigates to the specified offset from the \"current entry\".",
        "arguments": [
          {
            "name": "offset",
            "type": "Integer"
          }
        ]
      },
      {
        "name": "isCrashed",
        "signature": "()",
        "description": "Whether the renderer process has crashed."
      },
      {
        "name": "setUserAgent",
        "signature": "(userAgent)",
        "description": "Overrides the user agent for this web page.",
        "arguments": [
          {
            "name": "userAgent",
            "type": "String"
          }
        ]
      },
      {
        "name": "getUserAgent",
        "signature": "()",
        "description": "Returns a String representing the user agent for this web page."
      },
      {
        "name": "insertCSS",
        "signature": "(css)",
        "description": "Injects CSS into the current web page.",
        "arguments": [
          {
            "name": "css",
            "type": "String"
          }
        ]
      },
      {
        "name": "executeJavaScript",
        "signature": "(code[, userGesture, callback])",
        "description": "Evaluates code in page. In the browser window some HTML APIs like requestFullScreen can only be invoked by a gesture from the user. Setting userGesture to true will remove this limitation.",
        "arguments": [
          {
            "name": "code",
            "type": "String"
          },
          {
            "name": "userGesture",
            "type": "Boolean",
            "description": " (optional)"
          },
          {
            "name": "callback",
            "type": "Function",
            "description": " (optional) - Called after script has been executed."
          }
        ]
      },
      {
        "name": "setAudioMuted",
        "signature": "(muted)",
        "description": "Mute the audio on the current web page.",
        "arguments": [
          {
            "name": "muted",
            "type": "Boolean"
          }
        ]
      },
      {
        "name": "isAudioMuted",
        "signature": "()",
        "description": "Returns whether this page has been muted."
      },
      {
        "name": "undo",
        "signature": "()",
        "description": "Executes the editing command undo in web page."
      },
      {
        "name": "redo",
        "signature": "()",
        "description": "Executes the editing command redo in web page."
      },
      {
        "name": "cut",
        "signature": "()",
        "description": "Executes the editing command cut in web page."
      },
      {
        "name": "copy",
        "signature": "()",
        "description": "Executes the editing command copy in web page."
      },
      {
        "name": "paste",
        "signature": "()",
        "description": "Executes the editing command paste in web page."
      },
      {
        "name": "pasteAndMatchStyle",
        "signature": "()",
        "description": "Executes the editing command pasteAndMatchStyle in web page."
      },
      {
        "name": "delete",
        "signature": "()",
        "description": "Executes the editing command delete in web page."
      },
      {
        "name": "selectAll",
        "signature": "()",
        "description": "Executes the editing command selectAll in web page."
      },
      {
        "name": "unselect",
        "signature": "()",
        "description": "Executes the editing command unselect in web page."
      },
      {
        "name": "replace",
        "signature": "(text)",
        "description": "Executes the editing command replace in web page.",
        "arguments": [
          {
            "name": "text",
            "type": "String"
          }
        ]
      },
      {
        "name": "replaceMisspelling",
        "signature": "(text)",
        "description": "Executes the editing command replaceMisspelling in web page.",
        "arguments": [
          {
            "name": "text",
            "type": "String"
          }
        ]
      },
      {
        "name": "insertText",
        "signature": "(text)",
        "description": "Inserts text to the focused element.",
        "arguments": [
          {
            "name": "text",
            "type": "String"
          }
        ]
      },
      {
        "name": "findInPage",
        "signature": "(text[, options])",
        "description": "Starts a request to find all matches for the text in the web page and returns an Integer representing the request id used for the request. The result of the request can be obtained by subscribing to found-in-page event.",
        "arguments": [
          {
            "name": "text",
            "type": "String",
            "description": "Content to be searched, must not be empty."
          },
          {
            "name": "options",
            "type": "Object",
            "description": " (optional)",
            "properties": [
              {
                "name": "forward",
                "type": "Boolean",
                "description": "Whether to search forward or backward, defaults to <code>true</code>."
              }
            ]
          }
        ]
      },
      {
        "name": "stopFindInPage",
        "signature": "(action)",
        "description": "Stops any findInPage request for the webContents with the provided action.",
        "arguments": [
          {
            "name": "action",
            "type": "String",
            "description": "Specifies the action to take place when ending"
          }
        ]
      },
      {
        "name": "hasServiceWorker",
        "signature": "(callback)",
        "description": "Checks if any ServiceWorker is registered and returns a boolean as response to callback.",
        "arguments": [
          {
            "name": "callback",
            "type": "Function"
          }
        ]
      },
      {
        "name": "unregisterServiceWorker",
        "signature": "(callback)",
        "description": "Unregisters any ServiceWorker if present and returns a boolean as response to callback when the JS promise is fulfilled or false when the JS promise is rejected.",
        "arguments": [
          {
            "name": "callback",
            "type": "Function"
          }
        ]
      },
      {
        "name": "print",
        "signature": "([options])",
        "description": "Prints window's web page. When silent is set to false, Electron will pick up system's default printer and default settings for printing. Calling window.print() in web page is equivalent to calling webContents.print({silent: false, printBackground: false}). Note: On Windows, the print API relies on pdf.dll. If your application doesn't need the print feature, you can safely remove pdf.dll to reduce binary size.",
        "arguments": [
          {
            "name": "options",
            "type": "Object",
            "description": " (optional)",
            "properties": [
              {
                "name": "silent",
                "type": "Boolean",
                "description": "Don&apos;t ask user for print settings. Default is <code>false</code>."
              }
            ]
          }
        ]
      },
      {
        "name": "printToPDF",
        "signature": "(options, callback)",
        "description": "Prints window's web page as PDF with Chromium's preview printing custom settings. The callback will be called with callback(error, data) on completion. The data is a Buffer that contains the generated PDF data. By default, an empty options will be regarded as: An example of webContents.printToPDF:",
        "arguments": [
          {
            "name": "options",
            "type": "Object",
            "properties": [
              {
                "name": "height",
                "type": "and",
                "description": " <code>width</code> in microns."
              },
              {
                "name": "printBackground",
                "type": "Boolean",
                "description": "Whether to print CSS backgrounds."
              },
              {
                "name": "printSelectionOnly",
                "type": "Boolean",
                "description": "Whether to print selection only."
              },
              {
                "name": "landscape",
                "type": "Boolean",
                "description": "<code>true</code> for landscape, <code>false</code> for portrait."
              }
            ]
          },
          {
            "name": "callback",
            "type": "Function"
          }
        ]
      },
      {
        "name": "addWorkSpace",
        "signature": "(path)",
        "description": "Adds the specified path to DevTools workspace. Must be used after DevTools creation:",
        "arguments": [
          {
            "name": "path",
            "type": "String"
          }
        ]
      },
      {
        "name": "removeWorkSpace",
        "signature": "(path)",
        "description": "Removes the specified path from DevTools workspace.",
        "arguments": [
          {
            "name": "path",
            "type": "String"
          }
        ]
      },
      {
        "name": "openDevTools",
        "signature": "([options])",
        "description": "Opens the devtools.",
        "arguments": [
          {
            "name": "options",
            "type": "Object",
            "description": " (optional)",
            "properties": [
              {
                "name": "undocked",
                "type": "mode",
                "description": " it&apos;s possible to dock back. In <code>detach</code> mode it&apos;s not."
              }
            ]
          }
        ]
      },
      {
        "name": "closeDevTools",
        "signature": "()",
        "description": "Closes the devtools."
      },
      {
        "name": "isDevToolsOpened",
        "signature": "()",
        "description": "Returns whether the devtools is opened."
      },
      {
        "name": "isDevToolsFocused",
        "signature": "()",
        "description": "Returns whether the devtools view is focused ."
      },
      {
        "name": "toggleDevTools",
        "signature": "()",
        "description": "Toggles the developer tools."
      },
      {
        "name": "inspectElement",
        "signature": "(x, y)",
        "description": "Starts inspecting element at position (x, y).",
        "arguments": [
          {
            "name": "x",
            "type": "Integer"
          },
          {
            "name": "y",
            "type": "Integer"
          }
        ]
      },
      {
        "name": "inspectServiceWorker",
        "signature": "()",
        "description": "Opens the developer tools for the service worker context."
      },
      {
        "name": "send",
        "signature": "(channel[, arg1][, arg2][, ...])",
        "description": "Send an asynchronous message to renderer process via channel, you can also send arbitrary arguments. Arguments will be serialized in JSON internally and hence no functions or prototype chain will be included. The renderer process can handle the message by listening to channel with the ipcRenderer module. An example of sending messages from the main process to the renderer process:",
        "arguments": [
          {
            "name": "channel",
            "type": "String"
          }
        ]
      },
      {
        "name": "enableDeviceEmulation",
        "signature": "(parameters)",
        "description": "parameters Object, properties: Enable device emulation with the given parameters.",
        "arguments": [
          {
            "name": "screenPosition",
            "type": "String",
            "description": "Specify the screen type to emulate"
          },
          {
            "name": "screenSize",
            "type": "Object",
            "description": "Set the emulated screen size (screenPosition == mobile)",
            "properties": [
              {
                "name": "width",
                "type": "Integer",
                "description": "Set the emulated screen width"
              },
              {
                "name": "height",
                "type": "Integer",
                "description": "Set the emulated screen height"
              }
            ]
          },
          {
            "name": "viewPosition",
            "type": "Object",
            "description": "Position the view on the screen",
            "properties": [
              {
                "name": "x",
                "type": "Integer",
                "description": "Set the x axis offset from top left corner"
              },
              {
                "name": "y",
                "type": "Integer",
                "description": "Set the y axis offset from top left corner"
              }
            ]
          },
          {
            "name": "deviceScaleFactor",
            "type": "Integer",
            "description": "Set the device scale factor (if zero defaults to"
          },
          {
            "name": "viewSize",
            "type": "Object",
            "description": "Set the emulated view size (empty means no override)",
            "properties": [
              {
                "name": "width",
                "type": "Integer",
                "description": "Set the emulated view width"
              },
              {
                "name": "height",
                "type": "Integer",
                "description": "Set the emulated view height"
              }
            ]
          },
          {
            "name": "fitToView",
            "type": "Boolean",
            "description": "Whether emulated view should be scaled down if"
          },
          {
            "name": "offset",
            "type": "Object",
            "description": "Offset of the emulated view inside available space (not in",
            "properties": [
              {
                "name": "x",
                "type": "Float",
                "description": "Set the x axis offset from top left corner"
              },
              {
                "name": "y",
                "type": "Float",
                "description": "Set the y axis offset from top left corner"
              }
            ]
          },
          {
            "name": "scale",
            "type": "Float",
            "description": "Scale of emulated view inside available space (not in fit to"
          }
        ]
      },
      {
        "name": "disableDeviceEmulation",
        "signature": "()",
        "description": "Disable device emulation enabled by webContents.enableDeviceEmulation."
      },
      {
        "name": "sendInputEvent",
        "signature": "(event)",
        "description": "Sends an input event to the page. For keyboard events, the event object also have following properties: For mouse events, the event object also have following properties: For the mouseWheel event, the event object also have following properties:",
        "arguments": [
          {
            "name": "event",
            "type": "Object"
          },
          {
            "name": "keyCode",
            "type": "String",
            "description": " (<strong>required</strong>) - The character that will be sent"
          },
          {
            "name": "x",
            "type": "Integer",
            "description": " (<strong>required</strong>)"
          },
          {
            "name": "y",
            "type": "Integer",
            "description": " (<strong>required</strong>)"
          },
          {
            "name": "button",
            "type": "String",
            "description": "The button pressed, can be <code>left</code>, <code>middle</code>, <code>right</code>"
          },
          {
            "name": "globalX",
            "type": "Integer"
          },
          {
            "name": "globalY",
            "type": "Integer"
          },
          {
            "name": "movementX",
            "type": "Integer"
          },
          {
            "name": "movementY",
            "type": "Integer"
          },
          {
            "name": "clickCount",
            "type": "Integer"
          },
          {
            "name": "deltaX",
            "type": "Integer"
          },
          {
            "name": "deltaY",
            "type": "Integer"
          },
          {
            "name": "wheelTicksX",
            "type": "Integer"
          },
          {
            "name": "wheelTicksY",
            "type": "Integer"
          },
          {
            "name": "accelerationRatioX",
            "type": "Integer"
          },
          {
            "name": "accelerationRatioY",
            "type": "Integer"
          },
          {
            "name": "hasPreciseScrollingDeltas",
            "type": "Boolean"
          },
          {
            "name": "canScroll",
            "type": "Boolean"
          }
        ]
      },
      {
        "name": "beginFrameSubscription",
        "signature": "(callback)",
        "description": "Begin subscribing for presentation events and captured frames, the callback will be called with callback(frameBuffer) when there is a presentation event. The frameBuffer is a Buffer that contains raw pixel data. On most machines, the pixel data is effectively stored in 32bit BGRA format, but the actual representation depends on the endianness of the processor (most modern processors are little-endian, on machines with big-endian processors the data is in 32bit ARGB format).",
        "arguments": [
          {
            "name": "callback",
            "type": "Function"
          }
        ]
      },
      {
        "name": "endFrameSubscription",
        "signature": "()",
        "description": "End subscribing for frame presentation events."
      },
      {
        "name": "savePage",
        "signature": "(fullPath, saveType, callback)",
        "description": "Returns true if the process of saving page has been initiated successfully.",
        "arguments": [
          {
            "name": "fullPath",
            "type": "String",
            "description": "The full file path."
          },
          {
            "name": "saveType",
            "type": "String",
            "description": "Specify the save type."
          },
          {
            "name": "callback",
            "type": "Function",
            "description": "<code>(error) =&gt; {}</code>.",
            "properties": [
              {
                "name": "error",
                "type": "Error"
              }
            ]
          }
        ]
      },
      {
        "name": "showDefinitionForSelection",
        "signature": "()",
        "platforms": [
          "macOS"
        ],
        "description": "Shows pop-up dictionary that searches the selected word on the page."
      }
    ]
  },
  {
    "name": "process",
    "description": "Extensions to process object.",
    "mainProcess": true,
    "type": "Object",
    "slug": "process",
    "websiteUrl": "http://electron.atom.io/docs/api/process",
    "repoUrl": "https://github.com/electron/electron/blob/vundefined/docs/api/process.md",
    "events": [
      {
        "name": "loaded",
        "description": "Emitted when Electron has loaded its internal initialization script and is beginning to load the web page or the main script. It can be used by the preload script to add removed Node global symbols back to the global scope when node integration is turned off:"
      }
    ]
  },
  {
    "name": "desktopCapturer",
    "description": "List getUserMedia sources for capturing audio, video, and images from a\nmicrophone, camera, or screen.",
    "rendererProcess": true,
    "type": "Object",
    "slug": "desktop-capturer",
    "websiteUrl": "http://electron.atom.io/docs/api/desktop-capturer",
    "repoUrl": "https://github.com/electron/electron/blob/vundefined/docs/api/desktop-capturer.md"
  },
  {
    "name": "ipcRenderer",
    "description": "Communicate asynchronously from a renderer process to the main process.",
    "rendererProcess": true,
    "type": "Object",
    "slug": "ipc-renderer",
    "websiteUrl": "http://electron.atom.io/docs/api/ipc-renderer",
    "repoUrl": "https://github.com/electron/electron/blob/vundefined/docs/api/ipc-renderer.md"
  },
  {
    "name": "remote",
    "description": "Use main process modules from the renderer process.",
    "rendererProcess": true,
    "type": "Object",
    "slug": "remote",
    "websiteUrl": "http://electron.atom.io/docs/api/remote",
    "repoUrl": "https://github.com/electron/electron/blob/vundefined/docs/api/remote.md"
  },
  {
    "name": "webFrame",
    "description": "Customize the rendering of the current web page.",
    "rendererProcess": true,
    "type": "Object",
    "slug": "web-frame",
    "websiteUrl": "http://electron.atom.io/docs/api/web-frame",
    "repoUrl": "https://github.com/electron/electron/blob/vundefined/docs/api/web-frame.md"
  }
]